# storybook
npx sb@latest init
#eslint の質問はYESを入力

# emotion
yarn add @emotion/react
yarn add --dev @emotion/babel-plugin
yarn add --dev @emotion/babel-preset-css-prop

# .babel.rcの追加
{
  "presets": [
    [
      "next/babel",
      {
        "preset-react": {
          "runtime": "automatic",
          "importSource": "@emotion/react"
        }
      }
    ]
  ],
  "plugins": ["@emotion/babel-plugin"]
}
# .storybook/main.js の編集
//https://qiita.com/xrxoxcxox/items/fc79d6c833b0900ed736
babel: async (options) => ({
  ...options,
  presets: [...options.presets, "@emotion/babel-preset-css-prop"],
})

# eslの追加
npx install-peerdeps --dev eslint-config-airbnb
npx install-peerdeps --dev eslint-config-airbnb-typescript

# prettier
yarn add --dev eslint-config-prettier
yarn add --dev prettier

#　tsconfig追記
"jsxImportSource": "@emotion/react", //emotionのtypescriptエラー対応(型が存在しない)
"baseUrl": "./",
"paths": {
  "@/*": ["./src/*"]
}

# vscodeの設定ファイルsettings.jsonの上書き
{
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode" // フォーマッタをprettierに指定
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode" // フォーマッタをprettierに指定
  },
  "editor.formatOnSave": true, // ファイル保存時にPrettierでフォーマット
  "editor.formatOnPaste": true,
  "editor.formatOnType": true,
  "editor.codeActionsOnSave": [
    "source.organizeImports",
    "source.fixAll.eslint"
  ],
}